/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ACommands', null, global);
goog.exportSymbol('proto.AConnect', null, global);
goog.exportSymbol('proto.AConnected', null, global);
goog.exportSymbol('proto.AErr', null, global);
goog.exportSymbol('proto.AInitWarehouse', null, global);
goog.exportSymbol('proto.ALoaded', null, global);
goog.exportSymbol('proto.APack', null, global);
goog.exportSymbol('proto.APackage', null, global);
goog.exportSymbol('proto.APacked', null, global);
goog.exportSymbol('proto.AProduct', null, global);
goog.exportSymbol('proto.APurchaseMore', null, global);
goog.exportSymbol('proto.APutOnTruck', null, global);
goog.exportSymbol('proto.AQuery', null, global);
goog.exportSymbol('proto.AResponses', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AProduct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AProduct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AProduct.displayName = 'proto.AProduct';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AProduct.prototype.toObject = function(opt_includeInstance) {
  return proto.AProduct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AProduct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AProduct.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    description: jspb.Message.getField(msg, 2),
    count: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AProduct}
 */
proto.AProduct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AProduct;
  return proto.AProduct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AProduct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AProduct}
 */
proto.AProduct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AProduct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AProduct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AProduct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AProduct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int64 id = 1;
 * @return {number}
 */
proto.AProduct.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AProduct.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.AProduct.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AProduct.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string description = 2;
 * @return {string}
 */
proto.AProduct.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AProduct.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.AProduct.prototype.clearDescription = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AProduct.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 count = 3;
 * @return {number}
 */
proto.AProduct.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.AProduct.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.AProduct.prototype.clearCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AProduct.prototype.hasCount = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AInitWarehouse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AInitWarehouse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AInitWarehouse.displayName = 'proto.AInitWarehouse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AInitWarehouse.prototype.toObject = function(opt_includeInstance) {
  return proto.AInitWarehouse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AInitWarehouse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AInitWarehouse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    x: jspb.Message.getField(msg, 2),
    y: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AInitWarehouse}
 */
proto.AInitWarehouse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AInitWarehouse;
  return proto.AInitWarehouse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AInitWarehouse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AInitWarehouse}
 */
proto.AInitWarehouse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AInitWarehouse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AInitWarehouse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AInitWarehouse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AInitWarehouse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.AInitWarehouse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AInitWarehouse.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.AInitWarehouse.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AInitWarehouse.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 x = 2;
 * @return {number}
 */
proto.AInitWarehouse.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AInitWarehouse.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.AInitWarehouse.prototype.clearX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AInitWarehouse.prototype.hasX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 y = 3;
 * @return {number}
 */
proto.AInitWarehouse.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.AInitWarehouse.prototype.setY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.AInitWarehouse.prototype.clearY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AInitWarehouse.prototype.hasY = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AConnect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AConnect.repeatedFields_, null);
};
goog.inherits(proto.AConnect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AConnect.displayName = 'proto.AConnect';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AConnect.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AConnect.prototype.toObject = function(opt_includeInstance) {
  return proto.AConnect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AConnect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AConnect.toObject = function(includeInstance, msg) {
  var f, obj = {
    worldid: jspb.Message.getField(msg, 1),
    initwhList: jspb.Message.toObjectList(msg.getInitwhList(),
    proto.AInitWarehouse.toObject, includeInstance),
    isamazon: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AConnect}
 */
proto.AConnect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AConnect;
  return proto.AConnect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AConnect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AConnect}
 */
proto.AConnect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWorldid(value);
      break;
    case 2:
      var value = new proto.AInitWarehouse;
      reader.readMessage(value,proto.AInitWarehouse.deserializeBinaryFromReader);
      msg.addInitwh(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsamazon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AConnect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AConnect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AConnect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AConnect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getInitwhList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.AInitWarehouse.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 worldid = 1;
 * @return {number}
 */
proto.AConnect.prototype.getWorldid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AConnect.prototype.setWorldid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.AConnect.prototype.clearWorldid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AConnect.prototype.hasWorldid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AInitWarehouse initwh = 2;
 * @return {!Array<!proto.AInitWarehouse>}
 */
proto.AConnect.prototype.getInitwhList = function() {
  return /** @type{!Array<!proto.AInitWarehouse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AInitWarehouse, 2));
};


/** @param {!Array<!proto.AInitWarehouse>} value */
proto.AConnect.prototype.setInitwhList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.AInitWarehouse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AInitWarehouse}
 */
proto.AConnect.prototype.addInitwh = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.AInitWarehouse, opt_index);
};


proto.AConnect.prototype.clearInitwhList = function() {
  this.setInitwhList([]);
};


/**
 * required bool isAmazon = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AConnect.prototype.getIsamazon = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.AConnect.prototype.setIsamazon = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.AConnect.prototype.clearIsamazon = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AConnect.prototype.hasIsamazon = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AConnected = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AConnected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AConnected.displayName = 'proto.AConnected';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AConnected.prototype.toObject = function(opt_includeInstance) {
  return proto.AConnected.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AConnected} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AConnected.toObject = function(includeInstance, msg) {
  var f, obj = {
    worldid: jspb.Message.getField(msg, 1),
    result: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AConnected}
 */
proto.AConnected.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AConnected;
  return proto.AConnected.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AConnected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AConnected}
 */
proto.AConnected.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWorldid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AConnected.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AConnected.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AConnected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AConnected.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int64 worldid = 1;
 * @return {number}
 */
proto.AConnected.prototype.getWorldid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AConnected.prototype.setWorldid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.AConnected.prototype.clearWorldid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AConnected.prototype.hasWorldid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string result = 2;
 * @return {string}
 */
proto.AConnected.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AConnected.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.AConnected.prototype.clearResult = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AConnected.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.APack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.APack.repeatedFields_, null);
};
goog.inherits(proto.APack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.APack.displayName = 'proto.APack';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.APack.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.APack.prototype.toObject = function(opt_includeInstance) {
  return proto.APack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.APack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.APack.toObject = function(includeInstance, msg) {
  var f, obj = {
    whnum: jspb.Message.getField(msg, 1),
    thingsList: jspb.Message.toObjectList(msg.getThingsList(),
    proto.AProduct.toObject, includeInstance),
    shipid: jspb.Message.getField(msg, 3),
    seqnum: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.APack}
 */
proto.APack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.APack;
  return proto.APack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.APack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.APack}
 */
proto.APack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWhnum(value);
      break;
    case 2:
      var value = new proto.AProduct;
      reader.readMessage(value,proto.AProduct.deserializeBinaryFromReader);
      msg.addThings(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShipid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.APack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.APack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.APack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.APack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getThingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.AProduct.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * required int32 whnum = 1;
 * @return {number}
 */
proto.APack.prototype.getWhnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.APack.prototype.setWhnum = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.APack.prototype.clearWhnum = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APack.prototype.hasWhnum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AProduct things = 2;
 * @return {!Array<!proto.AProduct>}
 */
proto.APack.prototype.getThingsList = function() {
  return /** @type{!Array<!proto.AProduct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AProduct, 2));
};


/** @param {!Array<!proto.AProduct>} value */
proto.APack.prototype.setThingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.AProduct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AProduct}
 */
proto.APack.prototype.addThings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.AProduct, opt_index);
};


proto.APack.prototype.clearThingsList = function() {
  this.setThingsList([]);
};


/**
 * required int64 shipid = 3;
 * @return {number}
 */
proto.APack.prototype.getShipid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.APack.prototype.setShipid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.APack.prototype.clearShipid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APack.prototype.hasShipid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 seqnum = 4;
 * @return {number}
 */
proto.APack.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.APack.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.APack.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APack.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.APacked = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.APacked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.APacked.displayName = 'proto.APacked';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.APacked.prototype.toObject = function(opt_includeInstance) {
  return proto.APacked.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.APacked} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.APacked.toObject = function(includeInstance, msg) {
  var f, obj = {
    shipid: jspb.Message.getField(msg, 1),
    seqnum: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.APacked}
 */
proto.APacked.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.APacked;
  return proto.APacked.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.APacked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.APacked}
 */
proto.APacked.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShipid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.APacked.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.APacked.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.APacked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.APacked.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int64 shipid = 1;
 * @return {number}
 */
proto.APacked.prototype.getShipid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.APacked.prototype.setShipid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.APacked.prototype.clearShipid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APacked.prototype.hasShipid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 seqnum = 2;
 * @return {number}
 */
proto.APacked.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.APacked.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.APacked.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APacked.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ALoaded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ALoaded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ALoaded.displayName = 'proto.ALoaded';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ALoaded.prototype.toObject = function(opt_includeInstance) {
  return proto.ALoaded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ALoaded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ALoaded.toObject = function(includeInstance, msg) {
  var f, obj = {
    shipid: jspb.Message.getField(msg, 1),
    seqnum: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ALoaded}
 */
proto.ALoaded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ALoaded;
  return proto.ALoaded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ALoaded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ALoaded}
 */
proto.ALoaded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShipid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ALoaded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ALoaded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ALoaded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ALoaded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int64 shipid = 1;
 * @return {number}
 */
proto.ALoaded.prototype.getShipid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ALoaded.prototype.setShipid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ALoaded.prototype.clearShipid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ALoaded.prototype.hasShipid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 seqnum = 2;
 * @return {number}
 */
proto.ALoaded.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ALoaded.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ALoaded.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ALoaded.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.APutOnTruck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.APutOnTruck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.APutOnTruck.displayName = 'proto.APutOnTruck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.APutOnTruck.prototype.toObject = function(opt_includeInstance) {
  return proto.APutOnTruck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.APutOnTruck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.APutOnTruck.toObject = function(includeInstance, msg) {
  var f, obj = {
    whnum: jspb.Message.getField(msg, 1),
    truckid: jspb.Message.getField(msg, 2),
    shipid: jspb.Message.getField(msg, 3),
    seqnum: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.APutOnTruck}
 */
proto.APutOnTruck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.APutOnTruck;
  return proto.APutOnTruck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.APutOnTruck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.APutOnTruck}
 */
proto.APutOnTruck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWhnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTruckid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShipid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.APutOnTruck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.APutOnTruck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.APutOnTruck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.APutOnTruck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * required int32 whnum = 1;
 * @return {number}
 */
proto.APutOnTruck.prototype.getWhnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.APutOnTruck.prototype.setWhnum = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.APutOnTruck.prototype.clearWhnum = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APutOnTruck.prototype.hasWhnum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 truckid = 2;
 * @return {number}
 */
proto.APutOnTruck.prototype.getTruckid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.APutOnTruck.prototype.setTruckid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.APutOnTruck.prototype.clearTruckid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APutOnTruck.prototype.hasTruckid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 shipid = 3;
 * @return {number}
 */
proto.APutOnTruck.prototype.getShipid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.APutOnTruck.prototype.setShipid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.APutOnTruck.prototype.clearShipid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APutOnTruck.prototype.hasShipid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 seqnum = 4;
 * @return {number}
 */
proto.APutOnTruck.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.APutOnTruck.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.APutOnTruck.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APutOnTruck.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.APurchaseMore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.APurchaseMore.repeatedFields_, null);
};
goog.inherits(proto.APurchaseMore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.APurchaseMore.displayName = 'proto.APurchaseMore';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.APurchaseMore.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.APurchaseMore.prototype.toObject = function(opt_includeInstance) {
  return proto.APurchaseMore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.APurchaseMore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.APurchaseMore.toObject = function(includeInstance, msg) {
  var f, obj = {
    whnum: jspb.Message.getField(msg, 1),
    thingsList: jspb.Message.toObjectList(msg.getThingsList(),
    proto.AProduct.toObject, includeInstance),
    seqnum: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.APurchaseMore}
 */
proto.APurchaseMore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.APurchaseMore;
  return proto.APurchaseMore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.APurchaseMore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.APurchaseMore}
 */
proto.APurchaseMore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWhnum(value);
      break;
    case 2:
      var value = new proto.AProduct;
      reader.readMessage(value,proto.AProduct.deserializeBinaryFromReader);
      msg.addThings(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.APurchaseMore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.APurchaseMore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.APurchaseMore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.APurchaseMore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getThingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.AProduct.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * required int32 whnum = 1;
 * @return {number}
 */
proto.APurchaseMore.prototype.getWhnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.APurchaseMore.prototype.setWhnum = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.APurchaseMore.prototype.clearWhnum = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APurchaseMore.prototype.hasWhnum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AProduct things = 2;
 * @return {!Array<!proto.AProduct>}
 */
proto.APurchaseMore.prototype.getThingsList = function() {
  return /** @type{!Array<!proto.AProduct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AProduct, 2));
};


/** @param {!Array<!proto.AProduct>} value */
proto.APurchaseMore.prototype.setThingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.AProduct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AProduct}
 */
proto.APurchaseMore.prototype.addThings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.AProduct, opt_index);
};


proto.APurchaseMore.prototype.clearThingsList = function() {
  this.setThingsList([]);
};


/**
 * required int64 seqnum = 3;
 * @return {number}
 */
proto.APurchaseMore.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.APurchaseMore.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.APurchaseMore.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APurchaseMore.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AErr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AErr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AErr.displayName = 'proto.AErr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AErr.prototype.toObject = function(opt_includeInstance) {
  return proto.AErr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AErr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AErr.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getField(msg, 1),
    originseqnum: jspb.Message.getField(msg, 2),
    seqnum: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AErr}
 */
proto.AErr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AErr;
  return proto.AErr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AErr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AErr}
 */
proto.AErr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setErr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOriginseqnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AErr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AErr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AErr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AErr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * required string err = 1;
 * @return {string}
 */
proto.AErr.prototype.getErr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AErr.prototype.setErr = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.AErr.prototype.clearErr = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AErr.prototype.hasErr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 originseqnum = 2;
 * @return {number}
 */
proto.AErr.prototype.getOriginseqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AErr.prototype.setOriginseqnum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.AErr.prototype.clearOriginseqnum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AErr.prototype.hasOriginseqnum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 seqnum = 3;
 * @return {number}
 */
proto.AErr.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.AErr.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.AErr.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AErr.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AQuery.displayName = 'proto.AQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.AQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    packageid: jspb.Message.getField(msg, 1),
    seqnum: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AQuery}
 */
proto.AQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AQuery;
  return proto.AQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AQuery}
 */
proto.AQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPackageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int64 packageid = 1;
 * @return {number}
 */
proto.AQuery.prototype.getPackageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AQuery.prototype.setPackageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.AQuery.prototype.clearPackageid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AQuery.prototype.hasPackageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 seqnum = 2;
 * @return {number}
 */
proto.AQuery.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AQuery.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.AQuery.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AQuery.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.APackage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.APackage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.APackage.displayName = 'proto.APackage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.APackage.prototype.toObject = function(opt_includeInstance) {
  return proto.APackage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.APackage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.APackage.toObject = function(includeInstance, msg) {
  var f, obj = {
    packageid: jspb.Message.getField(msg, 1),
    status: jspb.Message.getField(msg, 2),
    seqnum: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.APackage}
 */
proto.APackage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.APackage;
  return proto.APackage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.APackage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.APackage}
 */
proto.APackage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPackageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.APackage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.APackage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.APackage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.APackage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * required int64 packageid = 1;
 * @return {number}
 */
proto.APackage.prototype.getPackageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.APackage.prototype.setPackageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.APackage.prototype.clearPackageid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APackage.prototype.hasPackageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string status = 2;
 * @return {string}
 */
proto.APackage.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.APackage.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.APackage.prototype.clearStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APackage.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 seqnum = 3;
 * @return {number}
 */
proto.APackage.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.APackage.prototype.setSeqnum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.APackage.prototype.clearSeqnum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.APackage.prototype.hasSeqnum = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ACommands = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ACommands.repeatedFields_, null);
};
goog.inherits(proto.ACommands, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ACommands.displayName = 'proto.ACommands';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ACommands.repeatedFields_ = [1,2,3,4,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ACommands.prototype.toObject = function(opt_includeInstance) {
  return proto.ACommands.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ACommands} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ACommands.toObject = function(includeInstance, msg) {
  var f, obj = {
    buyList: jspb.Message.toObjectList(msg.getBuyList(),
    proto.APurchaseMore.toObject, includeInstance),
    topackList: jspb.Message.toObjectList(msg.getTopackList(),
    proto.APack.toObject, includeInstance),
    loadList: jspb.Message.toObjectList(msg.getLoadList(),
    proto.APutOnTruck.toObject, includeInstance),
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.AQuery.toObject, includeInstance),
    simspeed: jspb.Message.getField(msg, 5),
    disconnect: jspb.Message.getField(msg, 6),
    acksList: jspb.Message.getRepeatedField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ACommands}
 */
proto.ACommands.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ACommands;
  return proto.ACommands.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ACommands} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ACommands}
 */
proto.ACommands.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.APurchaseMore;
      reader.readMessage(value,proto.APurchaseMore.deserializeBinaryFromReader);
      msg.addBuy(value);
      break;
    case 2:
      var value = new proto.APack;
      reader.readMessage(value,proto.APack.deserializeBinaryFromReader);
      msg.addTopack(value);
      break;
    case 3:
      var value = new proto.APutOnTruck;
      reader.readMessage(value,proto.APutOnTruck.deserializeBinaryFromReader);
      msg.addLoad(value);
      break;
    case 4:
      var value = new proto.AQuery;
      reader.readMessage(value,proto.AQuery.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSimspeed(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisconnect(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addAcks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ACommands.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ACommands.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ACommands} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ACommands.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBuyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.APurchaseMore.serializeBinaryToWriter
    );
  }
  f = message.getTopackList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.APack.serializeBinaryToWriter
    );
  }
  f = message.getLoadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.APutOnTruck.serializeBinaryToWriter
    );
  }
  f = message.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.AQuery.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getAcksList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      7,
      f
    );
  }
};


/**
 * repeated APurchaseMore buy = 1;
 * @return {!Array<!proto.APurchaseMore>}
 */
proto.ACommands.prototype.getBuyList = function() {
  return /** @type{!Array<!proto.APurchaseMore>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.APurchaseMore, 1));
};


/** @param {!Array<!proto.APurchaseMore>} value */
proto.ACommands.prototype.setBuyList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.APurchaseMore=} opt_value
 * @param {number=} opt_index
 * @return {!proto.APurchaseMore}
 */
proto.ACommands.prototype.addBuy = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.APurchaseMore, opt_index);
};


proto.ACommands.prototype.clearBuyList = function() {
  this.setBuyList([]);
};


/**
 * repeated APack topack = 2;
 * @return {!Array<!proto.APack>}
 */
proto.ACommands.prototype.getTopackList = function() {
  return /** @type{!Array<!proto.APack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.APack, 2));
};


/** @param {!Array<!proto.APack>} value */
proto.ACommands.prototype.setTopackList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.APack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.APack}
 */
proto.ACommands.prototype.addTopack = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.APack, opt_index);
};


proto.ACommands.prototype.clearTopackList = function() {
  this.setTopackList([]);
};


/**
 * repeated APutOnTruck load = 3;
 * @return {!Array<!proto.APutOnTruck>}
 */
proto.ACommands.prototype.getLoadList = function() {
  return /** @type{!Array<!proto.APutOnTruck>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.APutOnTruck, 3));
};


/** @param {!Array<!proto.APutOnTruck>} value */
proto.ACommands.prototype.setLoadList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.APutOnTruck=} opt_value
 * @param {number=} opt_index
 * @return {!proto.APutOnTruck}
 */
proto.ACommands.prototype.addLoad = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.APutOnTruck, opt_index);
};


proto.ACommands.prototype.clearLoadList = function() {
  this.setLoadList([]);
};


/**
 * repeated AQuery queries = 4;
 * @return {!Array<!proto.AQuery>}
 */
proto.ACommands.prototype.getQueriesList = function() {
  return /** @type{!Array<!proto.AQuery>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AQuery, 4));
};


/** @param {!Array<!proto.AQuery>} value */
proto.ACommands.prototype.setQueriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.AQuery=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AQuery}
 */
proto.ACommands.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.AQuery, opt_index);
};


proto.ACommands.prototype.clearQueriesList = function() {
  this.setQueriesList([]);
};


/**
 * optional uint32 simspeed = 5;
 * @return {number}
 */
proto.ACommands.prototype.getSimspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ACommands.prototype.setSimspeed = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ACommands.prototype.clearSimspeed = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ACommands.prototype.hasSimspeed = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool disconnect = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ACommands.prototype.getDisconnect = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.ACommands.prototype.setDisconnect = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ACommands.prototype.clearDisconnect = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ACommands.prototype.hasDisconnect = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated int64 acks = 7;
 * @return {!Array<number>}
 */
proto.ACommands.prototype.getAcksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<number>} value */
proto.ACommands.prototype.setAcksList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.ACommands.prototype.addAcks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.ACommands.prototype.clearAcksList = function() {
  this.setAcksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AResponses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AResponses.repeatedFields_, null);
};
goog.inherits(proto.AResponses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AResponses.displayName = 'proto.AResponses';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AResponses.repeatedFields_ = [1,2,3,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AResponses.prototype.toObject = function(opt_includeInstance) {
  return proto.AResponses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AResponses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AResponses.toObject = function(includeInstance, msg) {
  var f, obj = {
    arrivedList: jspb.Message.toObjectList(msg.getArrivedList(),
    proto.APurchaseMore.toObject, includeInstance),
    readyList: jspb.Message.toObjectList(msg.getReadyList(),
    proto.APacked.toObject, includeInstance),
    loadedList: jspb.Message.toObjectList(msg.getLoadedList(),
    proto.ALoaded.toObject, includeInstance),
    finished: jspb.Message.getField(msg, 4),
    errorList: jspb.Message.toObjectList(msg.getErrorList(),
    proto.AErr.toObject, includeInstance),
    acksList: jspb.Message.getRepeatedField(msg, 6),
    packagestatusList: jspb.Message.toObjectList(msg.getPackagestatusList(),
    proto.APackage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AResponses}
 */
proto.AResponses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AResponses;
  return proto.AResponses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AResponses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AResponses}
 */
proto.AResponses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.APurchaseMore;
      reader.readMessage(value,proto.APurchaseMore.deserializeBinaryFromReader);
      msg.addArrived(value);
      break;
    case 2:
      var value = new proto.APacked;
      reader.readMessage(value,proto.APacked.deserializeBinaryFromReader);
      msg.addReady(value);
      break;
    case 3:
      var value = new proto.ALoaded;
      reader.readMessage(value,proto.ALoaded.deserializeBinaryFromReader);
      msg.addLoaded(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFinished(value);
      break;
    case 5:
      var value = new proto.AErr;
      reader.readMessage(value,proto.AErr.deserializeBinaryFromReader);
      msg.addError(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addAcks(value);
      break;
    case 7:
      var value = new proto.APackage;
      reader.readMessage(value,proto.APackage.deserializeBinaryFromReader);
      msg.addPackagestatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AResponses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AResponses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AResponses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AResponses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArrivedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.APurchaseMore.serializeBinaryToWriter
    );
  }
  f = message.getReadyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.APacked.serializeBinaryToWriter
    );
  }
  f = message.getLoadedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ALoaded.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getErrorList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.AErr.serializeBinaryToWriter
    );
  }
  f = message.getAcksList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      6,
      f
    );
  }
  f = message.getPackagestatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.APackage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated APurchaseMore arrived = 1;
 * @return {!Array<!proto.APurchaseMore>}
 */
proto.AResponses.prototype.getArrivedList = function() {
  return /** @type{!Array<!proto.APurchaseMore>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.APurchaseMore, 1));
};


/** @param {!Array<!proto.APurchaseMore>} value */
proto.AResponses.prototype.setArrivedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.APurchaseMore=} opt_value
 * @param {number=} opt_index
 * @return {!proto.APurchaseMore}
 */
proto.AResponses.prototype.addArrived = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.APurchaseMore, opt_index);
};


proto.AResponses.prototype.clearArrivedList = function() {
  this.setArrivedList([]);
};


/**
 * repeated APacked ready = 2;
 * @return {!Array<!proto.APacked>}
 */
proto.AResponses.prototype.getReadyList = function() {
  return /** @type{!Array<!proto.APacked>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.APacked, 2));
};


/** @param {!Array<!proto.APacked>} value */
proto.AResponses.prototype.setReadyList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.APacked=} opt_value
 * @param {number=} opt_index
 * @return {!proto.APacked}
 */
proto.AResponses.prototype.addReady = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.APacked, opt_index);
};


proto.AResponses.prototype.clearReadyList = function() {
  this.setReadyList([]);
};


/**
 * repeated ALoaded loaded = 3;
 * @return {!Array<!proto.ALoaded>}
 */
proto.AResponses.prototype.getLoadedList = function() {
  return /** @type{!Array<!proto.ALoaded>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ALoaded, 3));
};


/** @param {!Array<!proto.ALoaded>} value */
proto.AResponses.prototype.setLoadedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ALoaded=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ALoaded}
 */
proto.AResponses.prototype.addLoaded = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ALoaded, opt_index);
};


proto.AResponses.prototype.clearLoadedList = function() {
  this.setLoadedList([]);
};


/**
 * optional bool finished = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AResponses.prototype.getFinished = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.AResponses.prototype.setFinished = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.AResponses.prototype.clearFinished = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AResponses.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated AErr error = 5;
 * @return {!Array<!proto.AErr>}
 */
proto.AResponses.prototype.getErrorList = function() {
  return /** @type{!Array<!proto.AErr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AErr, 5));
};


/** @param {!Array<!proto.AErr>} value */
proto.AResponses.prototype.setErrorList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.AErr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AErr}
 */
proto.AResponses.prototype.addError = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.AErr, opt_index);
};


proto.AResponses.prototype.clearErrorList = function() {
  this.setErrorList([]);
};


/**
 * repeated int64 acks = 6;
 * @return {!Array<number>}
 */
proto.AResponses.prototype.getAcksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<number>} value */
proto.AResponses.prototype.setAcksList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.AResponses.prototype.addAcks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.AResponses.prototype.clearAcksList = function() {
  this.setAcksList([]);
};


/**
 * repeated APackage packagestatus = 7;
 * @return {!Array<!proto.APackage>}
 */
proto.AResponses.prototype.getPackagestatusList = function() {
  return /** @type{!Array<!proto.APackage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.APackage, 7));
};


/** @param {!Array<!proto.APackage>} value */
proto.AResponses.prototype.setPackagestatusList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.APackage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.APackage}
 */
proto.AResponses.prototype.addPackagestatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.APackage, opt_index);
};


proto.AResponses.prototype.clearPackagestatusList = function() {
  this.setPackagestatusList([]);
};


goog.object.extend(exports, proto);
